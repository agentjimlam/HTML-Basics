

<!-- 2/14 questions -->
What is section element? Why not just use div element
Ans: In a nutshell, semantic HTML is a graphic design method without the use of graphic. 

The <div> element is the most general purpose element. It has no special meaning. 
- <div> is for just solely styling purpose. 

It’s purpose is to group content that is not semantically related. Because it is essentially meaningless to screen readers, it should be sparingly used.

Section is for more meaningful for like this "Newsletter" section of page. 

Because the contents of a <section> are meaningful when grouped together, they should have a “theme”. A <section>’s “theme” should be defined by including a heading element within the element, 
often immediately after the opening tag.

<section class="newsletter">
  <h1>Subscribe to the Newsletter</h1>
  <form> <!-- ... --> </form>
</section>



https://bitsofco.de/sectioning-content-in-html5/
https://medium.com/web-dev-survey-from-kyoto/semantic-html-as-graphic-design-without-graphics-ac98e9c2d756



<!-- 3/14 questions -->
Why <input> element no need a closing tag> 
Ans: <input> is among those few that we call void elements
--> 

<!-- How can I create a default value that disappears when the user types in the form?
Ans: the placeholder attribute

A hint to the user of what can be entered in the control . The placeholder text must not contain carriage returns or line-feeds. This attribute applies when the value of the type attribute is text , search , tel , url or email ; otherwise it is ignored.

For example, this is the search input field from Rotten Tomatoes:
<input type="text" name="search" class="form-control" placeholder="Search movies, TV, actors, more..." id="fullscreen-search-term" autocomplete="off" value="">


<!-- What is difference between name attribute and <id>?
Ans: <id> is a higher power, it is to give unique identifier to certain elements. There can only be one element by a given id in a web page, 
but there can be multiple forms with their own Submit, and their name atrributes can be the same. 

Yes, in terms of POST DATA, the name attribute is the unique identifier of the submitted value. id is the unique identifier of the DOM element. An id selector has higher specificity, more so than a name attribute selector. 
There can only be one element by a given id in a web page, but there can be multiple forms with their own Submit, and their name attributes could be the same.
-->

<!-- Why must there be a “name” and “for” attribute? Can’t the code work without them?
Ans: for associates/links/pairs a label with an input element. This is needed for people who use disability tools.

<!-- What is name attribute in <input> for?
Ans: Name is used to associate the input field with the data send to the server.

It’s also important that we include a name attribute for the <input> — without the name attribute, information in the <input> won’t be sent when the <form> is submitted. 
The value of the value attribute is paired with the value of the name attribute and sent as text when the form is submitted. 
For instance, if a user typed in “important details” in the text field created by our <input> element:

rendered filled text field which reads 'important details' 

When the form is submitted, the text: "first-text-field=important details" is sent to /example.html because the value of the name attribute is "first-text-field" and the value of value is "important details".


Summary:
1. <id> links label text to the input box. 
2. <label>'s for="target id" tells machine the label is for which unique <input> that has an id attribute 

<form action="/example.html" method="POST">
  <label for="meal">What do you want to eat?</label>
  <br>
  <input type="text" name="food" id="meal">
</form>

3. <input>'s name attribute needed as it is linked to the value attribute, eg. name="username", value="halloween123", so when form is submitted, the string/text sent to the data collecting .html is "username=halloween123".
So when at server side you want to deposit this string data there, you need to call the input name by its name = "username", so machine know it is from input box called "username" where machine take the data and store in the server.


<!-- 9/14 Questions -->
<!-- Why do we put yes in the `value` and in the `label`?
Ans: When we give an INPUT element an ID attribute, it is there as a hook for a LABEL.

<input id=“burger” name=“burger” value="yes" type=“radio”>
<label for="burger">YES</label>
or

<label for="burger">YES</label>
<input id=“burger” name=“burger” value="yes" type=“radio”>
The text in the label goes to the screen, the value goes to the POST data with the name burger

burger = 'yes'
Extended

<label>YES
<input name=“burger” value="yes" type=“radio”>
</label>
or

<label>
<input name=“burger” value="yes" type=“radio”>
YES</label>
Note above that the label wraps the input control. In that case we do not apply an ID attribute since the control is a child of the label.
-->





